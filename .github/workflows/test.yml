name: Test Suite

on:
  workflow_call:
    inputs:
      upload-coverage:
        description: 'Upload coverage reports'
        required: false
        default: true
        type: boolean
      run-custom-tests:
        description: 'Run custom primary key fix tests'
        required: false
        default: true
        type: boolean
      python-versions:
        description: 'Python versions to test (JSON array)'
        required: false
        default: '["3.9", "3.10", "3.11"]'
        type: string
    outputs:
      test-results:
        description: 'Test execution results'
        value: ${{ jobs.test-summary.outputs.results }}

env:
  # Prevent pygame from opening audio/video devices during testing
  SDL_VIDEODRIVER: dummy
  SDL_AUDIODRIVER: dummy

jobs:
  # Matrix testing across Python versions and operating systems
  test-matrix:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ${{ fromJSON(inputs.python-versions) }}
        exclude:
          # Exclude some combinations to reduce CI cost while maintaining coverage
          - os: macos-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.9"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for accurate coverage and git operations
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            setup.cfg
            tox.ini
            pyproject.toml

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            xvfb \
            x11-utils \
            libxkbcommon-x11-0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-xinerama0 \
            libxcb-xfixes0

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # macOS typically has what we need, but install any missing packages
          brew update || true

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Windows pygame should work without additional system packages
          echo "Windows setup complete"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox pytest coverage

      - name: Install project in development mode
        run: |
          pip install -e .

      - name: Run tox tests (Linux with xvfb)
        if: matrix.os == 'ubuntu-latest'
        run: |
          xvfb-run -a -s "-screen 0 1024x768x24" tox -e py${{ matrix.python-version | replace('.', '') }}

      - name: Run tox tests (macOS/Windows)
        if: matrix.os != 'ubuntu-latest'
        run: |
          tox -e py${{ matrix.python-version | replace('.', '') }}

      - name: Run custom primary key fix tests
        if: inputs.run-custom-tests
        run: |
          echo "Running custom primary key fix tests..."
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            xvfb-run -a -s "-screen 0 1024x768x24" python test_primary_key_fix.py
          else
            python test_primary_key_fix.py
          fi

      - name: Collect coverage data
        if: inputs.upload-coverage
        run: |
          coverage combine || true
          coverage xml -o coverage-${{ matrix.os }}-py${{ matrix.python-version }}.xml || true
          coverage html -d htmlcov-${{ matrix.os }}-py${{ matrix.python-version }} || true

      - name: Upload coverage reports
        if: inputs.upload-coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            coverage-*.xml
            htmlcov-*
            .coverage*
          retention-days: 30
          if-no-files-found: warn

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            .tox/*/log/
            *.log
            src/*.log
          retention-days: 7
          if-no-files-found: ignore

  # Additional focused tests for critical functionality
  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-matrix]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb

      - name: Install project dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest

      - name: Test OFX import functionality
        run: |
          echo "Testing OFX import with sample files..."
          xvfb-run -a -s "-screen 0 1024x768x24" python -c "
          from src.budgy.core import load_ofx_file
          from pathlib import Path
          
          # Test with sample OFX files if they exist
          testdata_dir = Path('src/budgy/core/tests/testdata')
          if testdata_dir.exists():
              ofx_files = list(testdata_dir.glob('*.ofx')) + list(testdata_dir.glob('*.qfx'))
              for file in ofx_files:
                  print(f'Testing OFX import with {file}')
                  try:
                      records = load_ofx_file(file)
                      print(f'Successfully imported {len(records)} records from {file.name}')
                  except Exception as e:
                      print(f'Error importing {file.name}: {e}')
          else:
              print('No test data directory found, skipping OFX import tests')
          "

      - name: Test database migration
        run: |
          echo "Testing database migration functionality..."
          xvfb-run -a -s "-screen 0 1024x768x24" python -c "
          from src.budgy.core.database import BudgyDatabase
          import tempfile
          import os
          
          # Test database creation and migration
          with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as f:
              test_db = f.name
          
          try:
              print('Testing database creation...')
              db = BudgyDatabase(test_db)
              print('Database created successfully')
              
              if db.index_exists('acct_fitid_posted'):
                  print('✅ New unique constraint exists')
              else:
                  print('❌ New unique constraint missing')
                  exit(1)
                  
              print('Migration test completed successfully')
          finally:
              if os.path.exists(test_db):
                  os.unlink(test_db)
          "

  # Test result summary and artifact aggregation
  test-summary:
    runs-on: ubuntu-latest
    needs: [test-matrix, integration-tests]
    if: always()
    outputs:
      results: ${{ steps.summary.outputs.results }}
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          merge-multiple: true

      - name: Generate test summary
        id: summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Matrix test results
          echo "### Matrix Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| OS | Python | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----|---------:|--------|" >> $GITHUB_STEP_SUMMARY
          
          # This would be populated by individual test results
          # For now, we'll use the job status
          matrix_status="${{ needs.test-matrix.result }}"
          integration_status="${{ needs.integration-tests.result }}"
          
          if [[ "$matrix_status" == "success" ]]; then
            echo "| Ubuntu/macOS/Windows | 3.9-3.11 | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Ubuntu/macOS/Windows | 3.9-3.11 | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Integration Tests" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$integration_status" == "success" ]]; then
            echo "✅ OFX import and database migration tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Integration tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Set output for other workflows
          if [[ "$matrix_status" == "success" && "$integration_status" == "success" ]]; then
            echo "results=success" >> $GITHUB_OUTPUT
          else
            echo "results=failure" >> $GITHUB_OUTPUT
          fi

      - name: Upload combined coverage report
        if: inputs.upload-coverage
        uses: actions/upload-artifact@v4
        with:
          name: combined-coverage-report
          path: |
            coverage-*.xml
            htmlcov-*
          retention-days: 30